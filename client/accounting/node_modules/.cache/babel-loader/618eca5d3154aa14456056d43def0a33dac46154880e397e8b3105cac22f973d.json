{"ast":null,"code":"import models from '../Models/models.js';\nconst HazardousJobModel = models.HazardousJobModel;\nexport const create = async (req, res) => {\n  try {\n    const {\n      jobTitle,\n      description\n    } = req.body;\n    const doc = new HazardousJobModel({\n      jobTitle,\n      description\n    });\n    const hazardousJob = await doc.save();\n    res.json(hazardousJob);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Create attempt failed'\n    });\n  }\n};\nexport const remove = async (req, res) => {\n  try {\n    const hazardousJobId = req.params.id;\n    const doc = await HazardousJobModel.findByIdAndDelete(hazardousJobId);\n    if (!doc) {\n      return res.status(404).json({\n        message: 'Hazardous job does not exist'\n      });\n    }\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Remove attempt failed'\n    });\n  }\n};\nexport const update = async (req, res) => {\n  try {\n    const hazardousJobId = req.params.id;\n    const {\n      jobTitle,\n      description\n    } = req.body;\n    await HazardousJobModel.findByIdAndUpdate(hazardousJobId, {\n      jobTitle,\n      description\n    });\n    res.json({\n      success: true\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Update attempt failed'\n    });\n  }\n};\nexport const getOne = async (req, res) => {\n  try {\n    const hazardousJobId = req.params.id;\n    const doc = await HazardousJobModel.findById(hazardousJobId);\n    if (doc) {\n      res.json(doc);\n    } else {\n      res.status(404).json({\n        message: 'Hazardous job not found'\n      });\n    }\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Search attempt failed'\n    });\n  }\n};\nexport const getAll = async (req, res) => {\n  try {\n    const hazardousJobs = await HazardousJobModel.find();\n    res.json(hazardousJobs);\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Failed to retrieve hazardous jobs'\n    });\n  }\n};","map":{"version":3,"names":["models","HazardousJobModel","create","req","res","jobTitle","description","body","doc","hazardousJob","save","json","err","console","log","status","message","remove","hazardousJobId","params","id","findByIdAndDelete","success","update","findByIdAndUpdate","getOne","findById","getAll","hazardousJobs","find"],"sources":["C:/Users/g_dra/Desktop/LABSSVZ/client/carservice/src/components/hazardousJobjadmin.jsx"],"sourcesContent":["import models from '../Models/models.js';\r\nconst HazardousJobModel = models.HazardousJobModel;\r\n\r\nexport const create = async (req, res) => {\r\n    try {\r\n        const { jobTitle, description } = req.body;\r\n        const doc = new HazardousJobModel({ jobTitle, description });\r\n        const hazardousJob = await doc.save();\r\n        res.json(hazardousJob);\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n            message: 'Create attempt failed',\r\n        });\r\n    }\r\n};\r\n\r\nexport const remove = async (req, res) => {\r\n    try {\r\n        const hazardousJobId = req.params.id;\r\n        const doc = await HazardousJobModel.findByIdAndDelete(hazardousJobId);\r\n        if (!doc) {\r\n            return res.status(404).json({\r\n                message: 'Hazardous job does not exist',\r\n            });\r\n        }\r\n        res.json({\r\n            success: true,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n            message: 'Remove attempt failed',\r\n        });\r\n    }\r\n};\r\n\r\nexport const update = async (req, res) => {\r\n    try {\r\n        const hazardousJobId = req.params.id;\r\n        const { jobTitle, description } = req.body;\r\n        await HazardousJobModel.findByIdAndUpdate(hazardousJobId, { jobTitle, description });\r\n        res.json({\r\n            success: true,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n            message: 'Update attempt failed',\r\n        });\r\n    }\r\n};\r\n\r\nexport const getOne = async (req, res) => {\r\n    try {\r\n        const hazardousJobId = req.params.id;\r\n        const doc = await HazardousJobModel.findById(hazardousJobId);\r\n        if (doc) {\r\n            res.json(doc);\r\n        } else {\r\n            res.status(404).json({ message: 'Hazardous job not found' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n            message: 'Search attempt failed',\r\n        });\r\n    }\r\n};\r\n\r\nexport const getAll = async (req, res) => {\r\n    try {\r\n        const hazardousJobs = await HazardousJobModel.find();\r\n        res.json(hazardousJobs);\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(500).json({\r\n            message: 'Failed to retrieve hazardous jobs',\r\n        });\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}